// This file defines the ReviewController class, which is responsible for handling component reviews.
// It allows users to add new reviews for components and saves them to a JSON file.
using Microsoft.AspNetCore.Mvc;
using ComputerBuilderMvcApp.Models;
using ComputerBuilderMvcApp.Data; 
using Microsoft.EntityFrameworkCore; 

namespace ComputerBuilderMvcApp.Controllers
{
    public class ReviewController(ApplicationDbContext context) : Controller
    {
         private readonly ApplicationDbContext _context = context;
        // The LoadReviewsFromFile and SaveReviewsToFile methods are no longer needed
        // as reviews are now handled by the database.

        // Handles the submission of a new component review.
        // Validates the review data. If valid, it adds the new review to the database,
        // and redirects to the component's detail page.
        // If invalid, it stores error messages and submitted data in TempData and redirects
        // back to the component's detail page to display errors.
        [HttpPost]
        public async Task<IActionResult> AddComponentReview(Review reviewViewModel)
        {
            if (reviewViewModel.ItemId <= 0)
            {
                ModelState.AddModelError(nameof(Review.ItemId), "A valid component must be selected.");
            }
            else
            {
                var componentExists = await _context.Component.AnyAsync(c => c.Id == reviewViewModel.ItemId);
                if (!componentExists)
                {
                    ModelState.AddModelError(nameof(Review.ItemId), "Selected component does not exist.");
                }
            }
           
            if (ModelState.IsValid)
            {
                var newReview = new Review
                {
                    // Id will be generated by the database if it's an identity column
                    ItemId = reviewViewModel.ItemId,
                    Rating = reviewViewModel.Rating,
                    Comments = reviewViewModel.Comments,
                    CustomerName = string.IsNullOrWhiteSpace(reviewViewModel.CustomerName) ? "Anonymous" : reviewViewModel.CustomerName,
                    ReviewDate = DateTime.UtcNow
                };

                _context.Reviews.Add(newReview);
                await _context.SaveChangesAsync();

                // Redirect back to the component's detail page
                // ComponentsController.Details expects a string id if Component.Id is string.
                // If Component.Id is int, then newReview.ItemId is fine.
                // Assuming Component.Id is int for this redirect based on Review.ItemId being int.
                return RedirectToAction("Details", "Components", new { id = newReview.ItemId });
            }
           
            // If Component.Id is int, then reviewViewModel.ItemId is fine.
            return RedirectToAction("Details", "Components", new { id = reviewViewModel.ItemId });
        }
    }
}