@*

*@
@model ComputerBuilderMvcApp.ViewModels.CheckoutViewModel
@{
    ViewData["Title"] = "Confirm Order & Checkout";
}

<div class="checkout-container">
    <h1>@ViewData["Title"]</h1>
    <hr />

    <div class="row">
        <div class="col-md-7">
            <h4>Order Summary</h4>
            @if (Model.Cart != null && Model.Cart.Items.Any())
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Item</th>
                            <th>Quantity</th>
                            <th class="text-end">Price</th>
                            <th class="text-end">Subtotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Cart.Items)
                        {
                            <tr>
                                <td>@item.CartItemName</td>
                                <td>@item.CartItemQuantity</td>
                                <td class="text-end">@(item.CartItemPriceCents / 100.0m)</td>
                                <td class="text-end">@item.SubtotalAsCurrency.ToString("C")</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="3" class="text-end"><strong>Total (before tax):</strong></td>
                            <td class="text-end"><strong>@(Model.Cart.Items.Sum(i => i.SubtotalAsCurrency).ToString("C"))</strong></td>
                        </tr>
                        @* You can add tax calculation display here if needed *@
                    </tfoot>
                </table>
            }
            else
            {
                <p>Your cart is empty.</p>
            }
        </div>

        <div class="col-md-5">
            <h4>Shipping & Confirmation</h4>
            <form asp-action="ProcessOrder" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group mb-3">
                    <label asp-for="CurrentCustomer.FirstName" class="form-label">First Name:</label>
                    <input asp-for="CurrentCustomer.FirstName" class="form-control" readonly />
                </div>
                <div class="form-group mb-3">
                    <label asp-for="CurrentCustomer.LastName" class="form-label">Last Name:</label>
                    <input asp-for="CurrentCustomer.LastName" class="form-control" readonly />
                </div>
                <div class="form-group mb-3">
                    <label asp-for="CurrentCustomer.Email" class="form-label">Email:</label>
                    <input asp-for="CurrentCustomer.Email" class="form-control" readonly />
                </div>

                <div class="form-group mb-3">
                    <label asp-for="ShippingAddress" class="form-label"></label>
                    <input asp-for="ShippingAddress" class="form-control" />
                    <span asp-validation-for="ShippingAddress" class="text-danger"></span>
                    @if (Model.CurrentCustomer != null && string.IsNullOrEmpty(Model.CurrentCustomer.Address) && string.IsNullOrEmpty(Model.ShippingAddress))
                    {
                        <small class="form-text text-muted">Please provide your shipping address.</small>
                    }
                    else if (string.IsNullOrEmpty(Model.ShippingAddress) && Model.CurrentCustomer != null && !string.IsNullOrEmpty(Model.CurrentCustomer.Address))
                    {
                         <small class="form-text text-muted">Using your default shipping address. You can update it here for this order.</small>
                    }
                    else if (!string.IsNullOrEmpty(Model.ShippingAddress) && Model.CurrentCustomer != null && !string.IsNullOrEmpty(Model.CurrentCustomer.Address) && Model.ShippingAddress != Model.CurrentCustomer.Address)
                    {
                        <small class="form-text text-info">Address will be updated for this order.</small>
                    }
                </div>
                
                @* Hidden field to pass cart total if needed, though ProcessOrder can recalculate from _cart service *@
                @* <input type="hidden" asp-for="Cart.TotalAmountBeforeTaxe" /> *@

                <div class="builder-buttons">
                    <button type="submit" class="btn btn-success">Place Order</button>
                    <a asp-action="Index" asp-controller="Cart" class="btn btn-secondary">Back to Cart</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}